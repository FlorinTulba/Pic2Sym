/******************************************************************************
 The application Pic2Sym approximates images by a
 grid of colored symbols with colored backgrounds.

 Copyrights from the libraries used by the program:
 - (c) 2003-2021 Boost (www.boost.org)
     License: doc/licenses/Boost.lic
     http://www.boost.org/LICENSE_1_0.txt
 - (c) 2015-2021 OpenCV (www.opencv.org)
     License: doc/licenses/OpenCV.lic
     http://opencv.org/license/
 - (c) 1996-2021 The FreeType Project (www.freetype.org)
     License: doc/licenses/FTL.txt
     http://git.savannah.gnu.org/cgit/freetype/freetype2.git/plain/docs/FTL.TXT
 - (c) 1997-2021 OpenMP Architecture Review Board (www.openmp.org)
   (c) Microsoft Corporation (implementation for OpenMP C/C++ v2.0 March 2002)
     See: https://msdn.microsoft.com/en-us/library/8y6825x5.aspx
 - (c) 1995-2021 zlib software (Jean-loup Gailly and Mark Adler - www.zlib.net)
     License: doc/licenses/zlib.lic
     http://www.zlib.net/zlib_license.html
 - (c) 2015-2021 Microsoft Guidelines Support Library - github.com/microsoft/GSL
     License: doc/licenses/MicrosoftGSL.lic
     https://raw.githubusercontent.com/microsoft/GSL/main/LICENSE


 (c) 2016-2021 Florin Tulba <florintulba@yahoo.com>

 This program is free software: you can use its results,
 redistribute it and/or modify it under the terms of the GNU
 Affero General Public License version 3 as published by the
 Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program ('agpl-3.0.txt').
 If not, see: http://www.gnu.org/licenses/agpl-3.0.txt .
 *****************************************************************************/

#ifndef H_GRID_BARS_FILTER
#define H_GRID_BARS_FILTER

#include "misc.h"
#include "symFilter.h"

#pragma warning(push, 0)

#include <opencv2/core/core.hpp>

#pragma warning(pop)

namespace pic2sym::syms::inline filter {

/**
Detects symbols typically used to generate a grid from glyphs.

Such characters are less desirable, since the image to be processed is already
split as a grid, so approximating patches with grid-like symbols produces the
impression of further division.

These symbols are quite elusive:
- they might expand even towards the corners (when the borders they define are
double-lines)
- they might not touch the borders of the glyph
- some of their branches might be thinner/thicker or single/double-lined
- the brightness of each branch isn't always constant, nor it has a constant
profile

After lots of approaches I still miss many true positives and get numerous false
positives.

It appears that supervised learning would be ideal here, instead of manually
evolving a model. It would be much easier just to provide a set of positives and
negatives to a machine learning algorithm and then check its accuracy.
*/
class GridBarsFilter : public TSymFilter<GridBarsFilter> {
 public:
  SYM_FILTER_DECLARE_IS_ENABLED(GridBarsFilter);

  /**
  Checks if pms can be filtered out based on this filter and sfc.
  @return false also if the filter is not enabled
  */
  static bool isDisposable(const IPixMapSym& pms,
                           const SymFilterCache& sfc) noexcept;

  explicit GridBarsFilter(
      std::unique_ptr<ISymFilter> nextFilter_ = nullptr) noexcept;

 private:
  /**
  Checks if sums might be the projection of a grid bar symbol.
  Allowed patterns:
  a) 0* t2+ t1+ A+ 0*
  b) 0* A+ t1+ t2+ 0*	(reverse of (a))
  c) 0* t1* A+ t1* 0*

  where:
  - t1 &lt; t2 - thicknesses of projected lines (which were parallel to the
  projection plan)
  - A (&gt;t2&gt;t1) - peak generated by the projection of a line perpendicular
  to the projection plan.

  @throw logic_error for reaching a state not handled yet

  Exception just to be reported, not handled
  */
  static bool checkProjectionForGridSymbols(const cv::Mat& sums) noexcept(!UT);
};

}  // namespace pic2sym::syms::inline filter

#endif  // H_GRID_BARS_FILTER
